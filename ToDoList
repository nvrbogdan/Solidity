pragma solidity ^0.8.26;
 
// Insert, update, read from array of structs
contract TodoList {
    struct Todo{
        string text;
        bool completed;
    }
 
    Todo[] public todos;
 
    function create(string calldata _text) external {
        todos.push(Todo({
            text: _text,
            completed: false
        }));
    }
 
    function updateText(uint _index, string calldata _text) external {
        todos[_index].text = _text; //35138 gas, enters the struct ones and changes one time one parameter
 
        // Todo storage todo = todos[_index]; 34578 gas, enters struct one time and changes multiple parameters, saves on gas for multiple parameter changes
        // todo.text = _text;
        // todo.text = _text;
        // todo.text = _text;
        // todo.text = _text;
    }
 
    function get(uint _index) external view returns (string memory, bool) {
        Todo memory todo = todos[_index];
        return (todo.text, todo.completed);
        // memory 29480 gas
        // storage 29397 gas cheaper get() method also gets created upon remix compile
    }    
 
    function toggleCompleted(uint _index) external {
        todos[_index].completed = !todos[_index].completed;
    }
 
}
